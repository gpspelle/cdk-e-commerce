{
  "Resources": {
    "ec2adminecommerceroleD7383331": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/ec2-admin-e-commerce-role/Resource"
      }
    },
    "ec2adminecommerceroleDefaultPolicyC8522414": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AdminECommerceStack1A8E9AF3",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ec2adminecommerceroleDefaultPolicyC8522414",
        "Roles": [
          {
            "Ref": "ec2adminecommerceroleD7383331"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/ec2-admin-e-commerce-role/DefaultPolicy/Resource"
      }
    },
    "ec2adminecommercesg45D75988": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "AdminECommerceStack/ec2-admin-e-commerce-sg",
        "GroupName": "ec2-admin-e-commerce-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allows SSH access from Internet",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allows HTTP access from Internet",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allows HTTPS access from Internet",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": "vpc-e022889d"
      },
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/ec2-admin-e-commerce-sg/Resource"
      }
    },
    "ec2adminecommerceInstanceProfile6BF2275F": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ec2adminecommerceroleD7383331"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/ec2-admin-e-commerce/InstanceProfile"
      }
    },
    "ec2adminecommerce7002D824": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "IamInstanceProfile": {
          "Ref": "ec2adminecommerceInstanceProfile6BF2275F"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "KeyName": "ec2-admin-e-commerce-key",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ec2adminecommercesg45D75988",
              "GroupId"
            ]
          }
        ],
        "SubnetId": "subnet-b7d44dd1",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ec2-admin-e-commerce"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash\n#!/bin/bash\n\ncd /home/ec2-user/\n\n## Updating Packages\nsudo yum update -y\n\n## Installing Git Client\nsudo yum install git -y\n\n## Installing Cronttab\nsudo yum install crontabs -y\nsudo chkconfig crond on\nsudo service crond start\n\n## For system to be able to compile software, you need many development tools, such as make, gcc, and autoconf.\nsudo yum groupinstall \"Development Tools\" -y\n\n## Installing Nginx\nsudo amazon-linux-extras install nginx1 -y\n\n## Modifying Nginx Server Configuration\nsudo cat > /etc/nginx/nginx.conf <<EOL\nuser nginx;\nworker_processes auto;\ninclude /usr/share/nginx/modules/*.conf;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    error_log /dev/null;\n    access_log /dev/null;\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    upstream express_server {\n        server 127.0.0.1:8000;\n        keepalive 64;\n    }\n    server {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_name _;\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_http_version 1.1;\n            proxy_pass http://express_server/;\n            proxy_redirect off;\n            proxy_read_timeout 240s;\n        }\n    }\n}\nEOL\n\n## Starting Nginx Services\nsudo chkconfig nginx on\nsudo service nginx start\nsudo service nginx restart\n\n## Writing the Script to be run as ec2-user\ncat > /tmp/subscript.sh << EOF\n\n## Installing NVM\ncurl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n \necho 'export NVM_DIR=\"/home/ec2-user/.nvm\"' >> /home/ec2-user/.bashrc\necho '[ -s \"\\$NVM_DIR/nvm.sh\" ] && . \"\\$NVM_DIR/nvm.sh\"  # This loads nvm' >> /home/ec2-user/.bashrc\n \n## Dot source the files to ensure that variables are available within the current shell\n. /home/ec2-user/.nvm/nvm.sh\n. /home/ec2-user/.bashrc\n \n## Install Node.js\nnvm install v17.0.1\nnvm use v17.0.1\nnvm alias default v17.0.1\n\ngit clone https://github.com/gpspelle/admin-e-commerce-auth\ncd admin-e-commerce-auth\n\n## Installing Global PM2 package\nnpm install -g pm2\n\nnpm install\n\n## Starting the Server\npm2 start index.js\n\n## Saving the current state of pm2\npm2 save\n\n## Adding Cron Job to Auto Restart PM2 on Reboot\ncat <(crontab -l) <(echo \"@reboot /home/ec2-user/.nvm/versions/node/v17.0.1/bin/node /home/ec2-user/.nvm/versions/node/v17.0.1/bin/pm2 resurrect\") | crontab -\n\nEOF\n\n## Changing the owner of the temp script so ec2-user could run it \nchown ec2-user:ec2-user /tmp/subscript.sh && chmod a+x /tmp/subscript.sh\n\n## Executing the script as ec2-user\nsleep 1; su - ec2-user -c \"/tmp/subscript.sh\""
        }
      },
      "DependsOn": [
        "ec2adminecommerceroleDefaultPolicyC8522414",
        "ec2adminecommerceroleD7383331"
      ],
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/ec2-admin-e-commerce/Resource"
      }
    },
    "AdminECommerceStack1A8E9AF3": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "admins"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/AdminECommerceStack/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WNzQrCMBCEn8V7XK0KXgUP4slSfYF0u0L6ky2bRCkh725bUfQ0s8PMtxlk2x2sFwf9dEusmlVEFoJ49RobVZDjIEjqeLe5Ft2RJ5mOS/B98OrI1nkJ6KfsU05qYkWjO4gFt/N41pxbg8PM+rrzCNAWKRe+m3bcEm7G74RBjB9OwqGfav/BZ/QLSKoarO64KiHedPl+O5uUkrJcEdRu9cj2sIZsUTtjlhKsNx1B8dYXvKfGYAsBAAA="
      },
      "Metadata": {
        "aws:cdk:path": "AdminECommerceStack/CDKMetadata/Default"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    }
  },
  "Outputs": {
    "ec2adminecommerceoutput": {
      "Value": {
        "Fn::GetAtt": [
          "ec2adminecommerce7002D824",
          "PublicIp"
        ]
      }
    }
  }
}